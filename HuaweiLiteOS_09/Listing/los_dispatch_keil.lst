


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       ---------------------
    2 00000000         ; Copyright (c) <2016-2018>, <Huawei Technologies Co., L
                       td>
    3 00000000         ; All rights reserved.
    4 00000000         ; Redistribution and use in source and binary forms, wit
                       h or without modification,
    5 00000000         ; are permitted provided that the following conditions a
                       re met:
    6 00000000         ; 1. Redistributions of source code must retain the abov
                       e copyright notice, this list of
    7 00000000         ; conditions and the following disclaimer.
    8 00000000         ; 2. Redistributions in binary form must reproduce the a
                       bove copyright notice, this list
    9 00000000         ; of conditions and the following disclaimer in the docu
                       mentation and/or other materials
   10 00000000         ; provided with the distribution.
   11 00000000         ; 3. Neither the name of the copyright holder nor the na
                       mes of its contributors may be used
   12 00000000         ; to endorse or promote products derived from this softw
                       are without specific prior written
   13 00000000         ; permission.
   14 00000000         ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
                        CONTRIBUTORS
   15 00000000         ; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDI
                       NG, BUT NOT LIMITED TO,
   16 00000000         ; THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
                       FOR A PARTICULAR
   17 00000000         ; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGH
                       T HOLDER OR
   18 00000000         ; CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCID
                       ENTAL, SPECIAL,
   19 00000000         ; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NO
                       T LIMITED TO,
   20 00000000         ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF U
                       SE, DATA, OR PROFITS;
   21 00000000         ; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY TH
                       EORY OF LIABILITY,
   22 00000000         ; WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUD
                       ING NEGLIGENCE OR
   23 00000000         ; OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS S
                       OFTWARE, EVEN IF
   24 00000000         ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   25 00000000         ;-------------------------------------------------------
                       --------------------*/
   26 00000000         ;-------------------------------------------------------
                       ---------------------
   27 00000000         ; Notice of Export Control Law
   28 00000000         ; ===============================================
   29 00000000         ; Huawei LiteOS may be subject to applicable export cont
                       rol laws and regulations, which might
   30 00000000         ; include those applicable to Huawei LiteOS of U.S. and 
                       the country in which you are located.
   31 00000000         ; Import, export and usage of Huawei LiteOS in any manne
                       r by you shall be in compliance with such
   32 00000000         ; applicable export control laws and regulations.
   33 00000000         ;-------------------------------------------------------
                       --------------------*/
   34 00000000         



ARM Macro Assembler    Page 2 


   35 00000000         ;*******************************************************
                       *********************************
   36 00000000         ;                                  EXPORT FUNCTIONS
   37 00000000         ;*******************************************************
                       *********************************
   38 00000000         
   39 00000000                 EXPORT           LOS_IntLock
   40 00000000                 EXPORT           LOS_IntUnLock
   41 00000000                 EXPORT           LOS_IntRestore
   42 00000000                 EXPORT           LOS_StartToRun
   43 00000000                 EXPORT           osTaskSchedule
   44 00000000                 EXPORT           PendSV_Handler
   45 00000000         
   46 00000000         ;*******************************************************
                       *********************************
   47 00000000         ;                                  EXTERN PARAMETERS
   48 00000000         ;*******************************************************
                       *********************************
   49 00000000         
   50 00000000                 IMPORT           g_stLosTask
   51 00000000                 IMPORT           g_pfnTskSwitchHook
   52 00000000                 IMPORT           g_bTaskScheduled
   53 00000000         
   54 00000000         ;*******************************************************
                       *********************************
   55 00000000         ;                                  EQU
   56 00000000         ;*******************************************************
                       *********************************
   57 00000000         
   58 00000000 E000ED04 
                       OS_NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt Control
                                                             and State Register
                                                            .
   59 00000000 10000000 
                       OS_NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   60 00000000         
   61 00000000 E000ED20 
                       OS_NVIC_SYSPRI2
                               EQU              0xE000ED20  ; System Handler Pr
                                                            iority Register 2.
   62 00000000 FFFF0000 
                       OS_NVIC_PENDSV_SYSTICK_PRI
                               EQU              0xFFFF0000  ; SysTick + PendSV 
                                                            priority level (low
                                                            est).
   63 00000000         
   64 00000000 00000010 
                       OS_TASK_STATUS_RUNNING
                               EQU              0x0010      ; Task Status Flag 
                                                            (RUNNING).
   65 00000000         
   66 00000000         ;*******************************************************
                       *********************************
   67 00000000         ;                                  CODE GENERATION DIREC
                       TIVES
   68 00000000         ;*******************************************************



ARM Macro Assembler    Page 3 


                       *********************************
   69 00000000         
   70 00000000                 AREA             |.text|, CODE, READONLY
   71 00000000                 THUMB
   72 00000000                 REQUIRE8
   73 00000000                 PRESERVE8
   74 00000000         
   75 00000000         ;*******************************************************
                       *********************************
   76 00000000         ; Function:
   77 00000000         ;        VOID LOS_StartToRun(VOID);
   78 00000000         ; Description:
   79 00000000         ;        Start the first task, which is the highest prio
                       rity task in the priority queue.
   80 00000000         ;        Other tasks are started by task scheduling.
   81 00000000         ;*******************************************************
                       *********************************
   82 00000000         LOS_StartToRun
   83 00000000 B672            CPSID            I
   84 00000002         
   85 00000002         ;/**
   86 00000002         ; * Set PendSV and SysTick prority to the lowest.
   87 00000002         ; * read ---> modify ---> write-back.
   88 00000002         ; */
   89 00000002 482C            LDR              R0, =OS_NVIC_SYSPRI2
   90 00000004 492C            LDR              R1, =OS_NVIC_PENDSV_SYSTICK_PRI
   91 00000006 6802            LDR              R2, [R0]
   92 00000008 EA41 0102       ORR              R1, R1, R2
   93 0000000C 6001            STR              R1, [R0]
   94 0000000E         
   95 0000000E         ;/**
   96 0000000E         ; * Set g_bTaskScheduled = 1.
   97 0000000E         ; */
   98 0000000E 482B            LDR              R0, =g_bTaskScheduled
   99 00000010 F04F 0101       MOV              R1, #1
  100 00000014 6001            STR              R1, [R0]
  101 00000016         
  102 00000016         ;/**
  103 00000016         ; * Set g_stLosTask.pstRunTask = g_stLosTask.pstNewTask.
                       
  104 00000016         ; */
  105 00000016 482A            LDR              R0, =g_stLosTask
  106 00000018 6841            LDR              R1, [R0, #4]
  107 0000001A 6001            STR              R1, [R0]
  108 0000001C         
  109 0000001C         ;/**
  110 0000001C         ; * Set g_stLosTask.pstRunTask->usTaskStatus |= OS_TASK_
                       STATUS_RUNNING.
  111 0000001C         ; */
  112 0000001C 6801            LDR              R1, [R0]
  113 0000001E 888A            LDRH             R2, [R1, #4]
  114 00000020 F04F 0310       MOV              R3, #OS_TASK_STATUS_RUNNING
  115 00000024 EA42 0203       ORR              R2, R2, R3
  116 00000028 808A            STRH             R2, [R1, #4]
  117 0000002A         
  118 0000002A         ;/**
  119 0000002A         ; * Restore the default stack frame(R0-R3,R12,LR,PC,xPSR
                       ) of g_stLosTask.pstRunTask to R0-R7.
  120 0000002A         ; * [Initial EXC_RETURN ignore,] return by setting the C



ARM Macro Assembler    Page 4 


                       ONTROL register.
  121 0000002A         ; *
  122 0000002A         ; * The initial stack of the current running task is as 
                       follows:
  123 0000002A         ; *
  124 0000002A         ; *                     POP: Restore the context of the 
                       current running task ===>|
  125 0000002A         ; *                                                     
                                   High addr--->|
  126 0000002A         ; *                                                     
                         Bottom of the stack--->|
  127 0000002A         ; * ----------+---------------------------------+-------
                       -------------------------+
  128 0000002A         ; *           |  R4-R11,  PRIMASK,  EXC_RETURN  |  R0-R3
                       ,  R12,  LR,  PC,  xPSR  |
  129 0000002A         ; * ----------+---------------------------------+-------
                       -------------------------+
  130 0000002A         ; *           |<---Top of the stack, restored from g_stL
                       osTask.pstRunTask->pStackPointer
  131 0000002A         ; *           |<---           skip          --->|<---   
                         copy to R0-R7      --->|
  132 0000002A         ; *                                                     
                                  R12 to PSP--->|
  133 0000002A         ; *                                        Stack pointer
                        after LOS_StartToRun--->|
  134 0000002A         ; */
  135 0000002A F8D1 C000       LDR              R12, [R1]
  136 0000002E F10C 0C24       ADD              R12, R12, #36 ; skip R4-R11, PR
                                                            IMASK.
  137 00000032                 IF               {FPU} != "SoftVFP"
  139                          ENDIF
  140 00000032 E8BC 00FF       LDMFD            R12!, {R0-R7}
  141 00000036         
  142 00000036         ;/**
  143 00000036         ; * Set the stack pointer of g_stLosTask.pstRunTask to P
                       SP.
  144 00000036         ; */
  145 00000036 F38C 8809       MSR              PSP, R12
  146 0000003A         
  147 0000003A         ;/**
  148 0000003A         ; * Set the CONTROL register, after schedule start, priv
                       ilege level and stack = PSP.
  149 0000003A         ; */
  150 0000003A F04F 0C02       MOV              R12, #2
  151 0000003E F38C 8814       MSR              CONTROL, R12
  152 00000042         
  153 00000042         ;/**
  154 00000042         ; * Enable interrupt. (The default PRIMASK value is 0, s
                       o enable directly)
  155 00000042         ; */
  156 00000042 46AE            MOV              LR, R5
  157 00000044 B662            CPSIE            I
  158 00000046         
  159 00000046         ;/**
  160 00000046         ; * Jump directly to the default PC of g_stLosTask.pstRu
                       nTask, the field information
  161 00000046         ; * of the main function will be destroyed and will neve
                       r be returned.
  162 00000046         ; */



ARM Macro Assembler    Page 5 


  163 00000046 4730            BX               R6
  164 00000048         
  165 00000048         ;*******************************************************
                       *********************************
  166 00000048         ; Function:
  167 00000048         ;        UINTPTR LOS_IntLock(VOID);
  168 00000048         ; Description:
  169 00000048         ;        Disable all interrupts except Reset,NMI and Har
                       dFault.
  170 00000048         ;        The value of currnet interruption state will be
                        returned to the caller to save.
  171 00000048         ;
  172 00000048         ; Function:
  173 00000048         ;        VOID LOS_IntRestore(UINTPTR uvIntSave);
  174 00000048         ; Description:
  175 00000048         ;        Restore the locked interruption of LOS_IntLock.
                       
  176 00000048         ;        The caller must pass in the value of interrupti
                       on state previously saved.
  177 00000048         ;*******************************************************
                       *********************************
  178 00000048         LOS_IntLock
  179 00000048 F3EF 8010       MRS              R0, PRIMASK
  180 0000004C B672            CPSID            I
  181 0000004E 4770            BX               LR
  182 00000050         
  183 00000050         LOS_IntUnLock
  184 00000050 F3EF 8010       MRS              R0, PRIMASK
  185 00000054 B662            CPSIE            I
  186 00000056 4770            BX               LR
  187 00000058         
  188 00000058         LOS_IntRestore
  189 00000058 F380 8810       MSR              PRIMASK, R0
  190 0000005C 4770            BX               LR
  191 0000005E         
  192 0000005E         ;*******************************************************
                       *********************************
  193 0000005E         ; Function:
  194 0000005E         ;        VOID osTaskSchedule(VOID);
  195 0000005E         ; Description:
  196 0000005E         ;        Start the task swtich process by software trigg
                       er PendSV interrupt.
  197 0000005E         ;*******************************************************
                       *********************************
  198 0000005E         osTaskSchedule
  199 0000005E 4819            LDR              R0, =OS_NVIC_INT_CTRL
  200 00000060 F04F 5180       LDR              R1, =OS_NVIC_PENDSVSET
  201 00000064 6001            STR              R1, [R0]
  202 00000066 4770            BX               LR
  203 00000068         
  204 00000068         ;*******************************************************
                       *********************************
  205 00000068         ; Function:
  206 00000068         ;        VOID PendSV_Handler(VOID);
  207 00000068         ; Description:
  208 00000068         ;        PendSV interrupt handler, switch the context of
                        the task.
  209 00000068         ;        First: Save the context of the current running 
                       task(g_stLosTask.pstRunTask)



ARM Macro Assembler    Page 6 


  210 00000068         ;               to its own stack.
  211 00000068         ;        Second: Restore the context of the next running
                        task(g_stLosTask.pstNewTask)
  212 00000068         ;                from its own stack.
  213 00000068         ;*******************************************************
                       *********************************
  214 00000068         PendSV_Handler
  215 00000068         ;/**
  216 00000068         ; * R12: Save the interruption state of the current runn
                       ing task.
  217 00000068         ; * Disable all interrupts except Reset,NMI and HardFaul
                       t
  218 00000068         ; */
  219 00000068 F3EF 8C10       MRS              R12, PRIMASK
  220 0000006C B672            CPSID            I
  221 0000006E         
  222 0000006E         ;/**
  223 0000006E         ; * Call task switch hook.
  224 0000006E         ; */
  225 0000006E 4A16            LDR              R2, =g_pfnTskSwitchHook
  226 00000070 6812            LDR              R2, [R2]
  227 00000072 B122            CBZ              R2, TaskSwitch
  228 00000074 E92D 5000       PUSH             {R12, LR}
  229 00000078 4790            BLX              R2
  230 0000007A E8BD 5000       POP              {R12, LR}
  231 0000007E         
  232 0000007E         TaskSwitch
  233 0000007E         ;/**
  234 0000007E         ; * R0 = now stack pointer of the current running task.
  235 0000007E         ; */
  236 0000007E F3EF 8009       MRS              R0, PSP
  237 00000082         
  238 00000082         ;/**
  239 00000082         ; * Save the stack frame([S16-S31],R4-R11) of the curren
                       t running task.
  240 00000082         ; * R12 save the PRIMASK value of the current running ta
                       sk.
  241 00000082         ; * NOTE: 1. Before entering the exception handler funct
                       ion, these registers
  242 00000082         ; *       ([NO_NAME,FPSCR,S15-S0],xPSR,PC,LR,R12,R3-R0) 
                       have been automatically
  243 00000082         ; *       saved by the CPU in the stack of the current r
                       unning task.
  244 00000082         ; *       2. If lazy stacking is enabled, space is reser
                       ved on the stack for
  245 00000082         ; *       the floating-point context(FPSCR,S15-S0), but 
                       the floating-point state
  246 00000082         ; *       is not saved. when the floating-point instruct
                       ion(VSTMDBEQ  R0!, {D8-D15})
  247 00000082         ; *       is executed, the floating-point context(FPSCR,
                       S15-S0) is first saved into
  248 00000082         ; *       the space reserved on the stack. In other word
                       s, the instruction
  249 00000082         ; *       'VSTMDBEQ  R0!, {D8-D15}' will trigger the CPU
                        to save 'FPSCR,S15-S0' first.
  250 00000082         ; *
  251 00000082         ; * The stack of the current running task is as follows:
                       
  252 00000082         ; *



ARM Macro Assembler    Page 7 


  253 00000082         ; *   |<=== PUSH: Save the context of the current runnin
                       g task
  254 00000082         ; *   |                                                 
                                           High addr--->|
  255 00000082         ; * --+-----------------------------------+-------------
                       ------------------------------+---
  256 00000082         ; *   | R4-R11,PRIMASK,EXC_RETURN,S16-S31 | R0-R3,R12,LR
                       ,PC,xPSR,S0-S15,FPSCR,NO_NAME |
  257 00000082         ; *   |                                                 
                               [   lazy stacking    ]|
  258 00000082         ; * --+-----------------------------------+-------------
                       ------------------------------+---
  259 00000082         ; *                                        Stack pointer
                        before entering exception--->|
  260 00000082         ; *                                       |<---         
                         cpu auto saved          --->|
  261 00000082         ; *                                       |<---PSP to R0
                       
  262 00000082         ; *   |<---Top of the stack, save to g_stLosTask.pstRunT
                       ask->pStackPointer
  263 00000082         ; */
  264 00000082                 IF               {FPU} != "SoftVFP" 
                                                            ; if FPU exist.
  269                          ENDIF
  270 00000082 E920 1FF0       STMFD            R0!, {R4-R12} ; save the core r
                                                            egisters and PRIMAS
                                                            K.
  271 00000086         
  272 00000086         ;/**
  273 00000086         ; * R5,R8.
  274 00000086         ; */
  275 00000086 4D0E            LDR              R5, =g_stLosTask
  276 00000088 F04F 0810       MOV              R8, #OS_TASK_STATUS_RUNNING
  277 0000008C         
  278 0000008C         ;/**
  279 0000008C         ; * Save the stack pointer of the current running task t
                       o TCB.
  280 0000008C         ; * (g_stLosTask.pstRunTask->pStackPointer = R0)
  281 0000008C         ; */
  282 0000008C 682E            LDR              R6, [R5]
  283 0000008E 6030            STR              R0, [R6]
  284 00000090         
  285 00000090         ;/**
  286 00000090         ; * Clear the RUNNING state of the current running task.
                       
  287 00000090         ; * (g_stLosTask.pstRunTask->usTaskStatus &= ~OS_TASK_ST
                       ATUS_RUNNING)
  288 00000090         ; */
  289 00000090 88B7            LDRH             R7, [R6, #4]
  290 00000092 EA27 0708       BIC              R7, R7, R8
  291 00000096 80B7            STRH             R7, [R6, #4]
  292 00000098         
  293 00000098         ;/**
  294 00000098         ; * Switch the current running task to the next running 
                       task.
  295 00000098         ; * (g_stLosTask.pstRunTask = g_stLosTask.pstNewTask)
  296 00000098         ; */
  297 00000098 6868            LDR              R0, [R5, #4]
  298 0000009A 6028            STR              R0, [R5]



ARM Macro Assembler    Page 8 


  299 0000009C         
  300 0000009C         ;/**
  301 0000009C         ; * Set the RUNNING state of the next running task.
  302 0000009C         ; * (g_stLosTask.pstNewTask->usTaskStatus |= OS_TASK_STA
                       TUS_RUNNING)
  303 0000009C         ; */
  304 0000009C 8887            LDRH             R7, [R0, #4]
  305 0000009E EA47 0708       ORR              R7, R7, R8
  306 000000A2 8087            STRH             R7, [R0, #4]
  307 000000A4         
  308 000000A4         ;/**
  309 000000A4         ; * Restore the stack pointer of the next running task f
                       rom TCB.
  310 000000A4         ; * (R1 = g_stLosTask.pstNewTask->pStackPointer)
  311 000000A4         ; */
  312 000000A4 6801            LDR              R1, [R0]
  313 000000A6         
  314 000000A6         ;/**
  315 000000A6         ; * Restore the stack frame(R4-R11,[S16-S31]) of the nex
                       t running task.
  316 000000A6         ; * R12 restore the PRIMASK value of the next running ta
                       sk.
  317 000000A6         ; * NOTE: After exiting the exception handler function, 
                       these registers
  318 000000A6         ; *       (PC,xPSR,R0-R3,R12,LR,[S0-S15,FPSCR,NO_NAME]) 
                       will be automatically
  319 000000A6         ; *       restored by the CPU from the stack of the next
                        running task.
  320 000000A6         ; *
  321 000000A6         ; * 1. The stack of the next running task is as follows:
                       
  322 000000A6         ; *
  323 000000A6         ; *                             POP: Restore the context
                        of the next running task ===>|
  324 000000A6         ; *                                                     
                                           High addr--->|
  325 000000A6         ; * --+-----------------------------------+-------------
                       ------------------------------+---
  326 000000A6         ; *   | R4-R11,PRIMASK,EXC_RETURN,S16-S31 | R0-R3,R12,LR
                       ,PC,xPSR,S0-S15,FPSCR,NO_NAME |
  327 000000A6         ; * --+-----------------------------------+-------------
                       ------------------------------+---
  328 000000A6         ; *   |<---Top of the stack, restored from g_stLosTask.p
                       stNewTask->pStackPointer
  329 000000A6         ; *                          R1 to PSP--->|
  330 000000A6         ; *                                       |<---        c
                       pu auto restoring         --->|
  331 000000A6         ; *                                          Stack point
                       er after exiting exception--->|
  332 000000A6         ; *
  333 000000A6         ; * 2. If the next running task is run for the first tim
                       e, the stack is as follows:
  334 000000A6         ; *
  335 000000A6         ; *                        POP: Restore the context of t
                       he next running task ===>|
  336 000000A6         ; *                                                     
                                   High addr--->|
  337 000000A6         ; *                                                     
                         Bottom of the stack--->|



ARM Macro Assembler    Page 9 


  338 000000A6         ; * ----------+---------------------------------+-------
                       -------------------------+
  339 000000A6         ; *           |  R4-R11,  PRIMASK,  EXC_RETURN  |  R0-R3
                       ,  R12,  LR,  PC,  xPSR  |
  340 000000A6         ; * ----------+---------------------------------+-------
                       -------------------------+
  341 000000A6         ; *           |<---Top of the stack, restored from g_stL
                       osTask.pstNewTask->pStackPointer
  342 000000A6         ; *                                R1 to PSP--->|
  343 000000A6         ; *                                             |<---   
                       cpu auto restoring   --->|
  344 000000A6         ; *                                     Stack pointer af
                       ter exiting exception--->|
  345 000000A6         ; */
  346 000000A6 E8B1 1FF0       LDMFD            R1!, {R4-R12} ; restore the cor
                                                            e registers and PRI
                                                            MASK.
  347 000000AA                 IF               {FPU} != "SoftVFP" 
                                                            ; if FPU exist.
  352                          ENDIF
  353 000000AA         
  354 000000AA         ;/**
  355 000000AA         ; * Set the stack pointer of the next running task to PS
                       P.
  356 000000AA         ; */
  357 000000AA F381 8809       MSR              PSP, R1
  358 000000AE         
  359 000000AE         ;/**
  360 000000AE         ; * Restore the interruption state of the next running t
                       ask.
  361 000000AE         ; */
  362 000000AE F38C 8810       MSR              PRIMASK, R12
  363 000000B2 4770            BX               LR
  364 000000B4         
  365 000000B4                 ALIGN
  366 000000B4                 END
              E000ED20 
              FFFF0000 
              00000000 
              00000000 
              E000ED04 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=..\..\output\los_dispatch_keil.d -o..\..\output\los_dispatch_keil.
o -I.\RTE\_HuaweiLiteOS -ID:\Keil\Keil_v5\Keil_v5\Packs\Keil\STM32F4xx_DFP\2.16
.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil\Keil_v5\Keil_v5\ARM\CMSI
S\Include --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 5
27" --predefine="STM32F429xx SETA 1" --list=..\..\listing\los_dispatch_keil.lst
 ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatch_keil.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 70 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
   Uses
      None
Comment: .text unused
LOS_IntLock 00000048

Symbol: LOS_IntLock
   Definitions
      At line 178 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S
   Uses
      At line 39 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
Comment: LOS_IntLock used once
LOS_IntRestore 00000058

Symbol: LOS_IntRestore
   Definitions
      At line 188 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S
   Uses
      At line 41 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
Comment: LOS_IntRestore used once
LOS_IntUnLock 00000050

Symbol: LOS_IntUnLock
   Definitions
      At line 183 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S
   Uses
      At line 40 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
Comment: LOS_IntUnLock used once
LOS_StartToRun 00000000

Symbol: LOS_StartToRun
   Definitions
      At line 82 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
   Uses
      At line 42 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
Comment: LOS_StartToRun used once
PendSV_Handler 00000068

Symbol: PendSV_Handler
   Definitions
      At line 214 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S
   Uses
      At line 44 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
Comment: PendSV_Handler used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

TaskSwitch 0000007E

Symbol: TaskSwitch
   Definitions
      At line 232 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S
   Uses
      At line 227 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S
Comment: TaskSwitch used once
osTaskSchedule 0000005E

Symbol: osTaskSchedule
   Definitions
      At line 198 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S
   Uses
      At line 43 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
Comment: osTaskSchedule used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

OS_NVIC_INT_CTRL E000ED04

Symbol: OS_NVIC_INT_CTRL
   Definitions
      At line 58 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
   Uses
      At line 199 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S
Comment: OS_NVIC_INT_CTRL used once
OS_NVIC_PENDSVSET 10000000

Symbol: OS_NVIC_PENDSVSET
   Definitions
      At line 59 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
   Uses
      At line 200 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S
Comment: OS_NVIC_PENDSVSET used once
OS_NVIC_PENDSV_SYSTICK_PRI FFFF0000

Symbol: OS_NVIC_PENDSV_SYSTICK_PRI
   Definitions
      At line 62 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
   Uses
      At line 90 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
Comment: OS_NVIC_PENDSV_SYSTICK_PRI used once
OS_NVIC_SYSPRI2 E000ED20

Symbol: OS_NVIC_SYSPRI2
   Definitions
      At line 61 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
   Uses
      At line 89 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
Comment: OS_NVIC_SYSPRI2 used once
OS_TASK_STATUS_RUNNING 00000010

Symbol: OS_TASK_STATUS_RUNNING
   Definitions
      At line 64 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
   Uses
      At line 114 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S
      At line 276 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S

5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

g_bTaskScheduled 00000000

Symbol: g_bTaskScheduled
   Definitions
      At line 52 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
   Uses
      At line 98 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
Comment: g_bTaskScheduled used once
g_pfnTskSwitchHook 00000000

Symbol: g_pfnTskSwitchHook
   Definitions
      At line 51 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
   Uses
      At line 225 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S
Comment: g_pfnTskSwitchHook used once
g_stLosTask 00000000

Symbol: g_stLosTask
   Definitions
      At line 50 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispatc
h_keil.S
   Uses
      At line 105 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S
      At line 275 in file ..\..\LiteOS\arch\arm\arm-m\cortex-m4\keil\los_dispat
ch_keil.S

3 symbols
351 symbols in table
